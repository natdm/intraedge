Go Training
Introduction to Go
5 Nov 2018

Nathan Hyland
Intraedge

* Before we start
- Nav to https://golang.org/doc/install and install the latest for your OS. 
- If already installed, run `go version` in your CLI to ensure you have 1.11+
- Ensure you have the addon in your IDE for go that has the most stars/upvotes/likes/whatever

If you don't want to work with Eclipse and getting the GoClipse addon, use VSCode with the Go plugin. 

* About Me
- Software developer for 3+yrs
- Project Manager previously
- Brightcove, Ticketmaster
- Favorite Academic Language: Scala
- Favorite General Language: Go

* About Go

.image /images/gopher.png

* What is Go
- Strictly typed
- General purpose
- Focuses on simplicity
- Lower level/Systems Programming
- Procedural, not OO or FP
- Compiles to a binary

* About the "not OOP" thing
Go FAQ:

_Is_ _Go_ _an_ _object-oriented_ _language?_

Yes and no. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. The concept of “interface” in Go provides a different approach that we believe is easy to use and in some ways more general. There are also ways to embed types in other types to provide something analogous—but not identical—to subclassing. Moreover, methods in Go are more general than in C++ or Java: they can be defined for any sort of data, even built-in types such as plain, “unboxed” integers. They are not restricted to structs (classes).

Also, the lack of a type hierarchy makes “objects” in Go feel much more lightweight than in languages such as C++ or Java.


* What makes it different
- Simplicity
- Concurrency Primitives
- No Generics (yet)
- Implicit interfaces

* Why is Go a thing? (goals)
- Less breaking changes
- Created in detest of C++
- Easy as Java to write (.. ish)
- Fast as C to run (.. ish)

* Core ideologies
- Strong stdlib helps make it a strong language 
- Strongly opinionated community
- Designed to be unambiguous
- Don't communicate by sharing memory, share memory by communicating
- Handle your errors, don't catch them
- Clear and *concise*

* Weakspots
- No interfaces (yet), is it really a weakness?
- Simple language means complex applications and tedious code
- Tooling/libs are still new (.. ish)
- Systems Programming language + GC??
