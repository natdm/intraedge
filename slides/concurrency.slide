Go Training
Concurrency
5 Nov 2018

Nathan Hyland
Intraedge

* Concurrency is not parallelism
- Parallelism is doing multiple things at once
- Concurrency is coordinating multiple things happening at once

.link https://www.youtube.com/watch?v=cN_DpYBzKso Rob Pike on this
* Parallelism
- Doing the same thing multiple times, multiple threads, multiple pieces of data
- Simultaneous execution of possibly related things.
- Dealing with a lot of things at once
Eg: "I have one thing to do, let's run it on multiple processors to speed it up." -- it gets slower.
.image ./images/parallelism.png

* Concurrency
- Doing the same thing in a coordinated effort, spanning multiple threads
- Composition of independently executing 'things' - Pike
- Doing a lot of things at once
.image ./images/concurrency.jpg

* Goroutines
Lightweight threads managed by the runtime.

.play ./code/goroutines/1/goroutines.go

* Inline Goroutines
.play ./code/goroutines/2/goroutines.go /START OMIT/,/END OMIT/

* Channels help coordination
.play ./code/channels/1/channels.go

* Channel types
.code ./code/channels/1/channels_types.go

* Channels to communicate
.play ./code/channels/2/channels.go /START OMIT/,/END OMIT/

* Select
.play ./code/channels/5/select.go  /START OMIT/,/END OMIT/

* Waitgroups
.play ./code/channels/4/waitgroups.go 

* Race Conditions
Race conditions are the result of multiple threads accessing a single piece
of data at the same time, a result of lack of coordination.
.code ./code/goroutines/3/race.go /START RACE OMIT/,/END RACE OMIT/

* Race Conditions (Fixed with channels)
Use a channel to serialize access
.code ./code/goroutines/3/race.go /START RACEFIX1 OMIT/,/END RACEFIX1 OMIT/

* Race Conditions (Fixed with a mutex)
Use a mutext to serialize access
.code ./code/goroutines/3/race.go /START RACEFIX2 OMIT/,/END RACEFIX2 OMIT/

* Use the right tool
Channels are fun, but they're not always the right tool for the job
- *sync.Locker* (sync.Mutex/sync.RWMutex)
- *sync.Map* (concurrent access map of type map[interface]interface)
- *sync.WaitGroup* to controll counts
- *sync.Cond* implements a condition variable, a rendezvous point for goroutines waiting for or announcing the occurrence of an event
- *atomic* package for low level operations of + and -
- *context.Context* for cancellation even though it's controversial
- Third party packages